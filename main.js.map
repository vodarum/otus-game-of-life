{"version":3,"file":"main.js","mappings":"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","sources":["webpack://otus-game-of-life/./src/scripts/Game.ts","webpack://otus-game-of-life/./src/scripts/GameField.ts","webpack://otus-game-of-life/./src/scripts/GameView.ts","webpack://otus-game-of-life/./src/scripts/index.ts"],"sourcesContent":["import { IGameField } from \"./GameField\";\nimport { IGameView } from \"./GameView\";\n\nexport interface IGame {\n  renderInitialState(): void;\n}\n\nexport class Game implements IGame {\n  private readonly gameField: IGameField;\n\n  private readonly gameView: IGameView;\n\n  private generatorId?: number;\n\n  private isRunning = false;\n\n  private speed: number;\n\n  constructor(gameField: IGameField, gameView: IGameView, speed = 1) {\n    this.gameField = gameField;\n    this.gameView = gameView;\n    this.speed = Game.toCorrectSpeed(speed);\n\n    this.renderInitialState();\n  }\n\n  renderInitialState() {\n    const state = this.gameField.getState();\n\n    this.gameView.updateGameField(state);\n    this.gameView.updateGameState({\n      width: state[0].length,\n      height: state.length,\n      speed: this.speed,\n    });\n\n    this.bindCallbacks();\n  }\n\n  private bindCallbacks() {\n    this.gameView.onCellClick(this.toggleCell.bind(this));\n    this.gameView.onBtnNextClick(this.next.bind(this));\n    this.gameView.onBtnRandomClick(this.fillState.bind(this));\n    this.gameView.onBtnClearClick(this.fillState.bind(this, 0));\n    this.gameView.onFieldSizeChange(this.changeFieldSize.bind(this));\n    this.gameView.onSpeedChange(this.changeSpeed.bind(this));\n    this.gameView.onGameStateChange(this.toggleIsRunning.bind(this));\n  }\n\n  private changeFieldSize(width: number, height: number) {\n    this.gameField.setSize(width, height);\n\n    const state = this.gameField.getState();\n\n    this.gameView.updateGameField(state);\n    this.gameView.updateGameState({\n      width: state[0].length,\n      height: state.length,\n    });\n  }\n\n  private changeSpeed(speed: number) {\n    this.speed = speed;\n\n    this.gameView.updateGameState({\n      speed,\n    });\n\n    if (this.isRunning) {\n      this.start();\n    }\n  }\n\n  private fillState(cellValue?: 0 | 1) {\n    this.gameField.fillState(cellValue);\n\n    const state = this.gameField.getState();\n\n    this.gameView.updateGameField(state);\n  }\n\n  private next() {\n    const isNextGeneration = this.gameField.nextGeneration();\n    const state = this.gameField.getState();\n\n    this.gameView.updateGameField(state);\n\n    if (this.isRunning) {\n      this.toggleIsRunning(isNextGeneration);\n    }\n\n    if (!isNextGeneration) {\n      alert(\"Игра окончена!\");\n    }\n  }\n\n  private start() {\n    clearTimeout(this.generatorId);\n\n    this.generatorId = window.setTimeout(() => {\n      this.next();\n    }, this.speed * 1000);\n  }\n\n  private stop() {\n    clearTimeout(this.generatorId);\n  }\n\n  private toggleCell(x: number, y: number) {\n    const state = this.gameField.getState();\n\n    this.gameField.toggleCellState(x, y);\n    this.gameView.updateGameField(state);\n  }\n\n  private toggleIsRunning(isRunning: boolean) {\n    /* eslint no-unused-expressions: [\"error\", { \"allowTernary\": true }] */\n    isRunning ? this.start() : this.stop();\n\n    if (this.isRunning !== isRunning) {\n      this.isRunning = isRunning;\n\n      this.gameView.updateGameState({\n        isRunning,\n      });\n    }\n  }\n\n  private static toCorrectSpeed(speed: number): number {\n    if (speed <= 0) {\n      console.log(\"Speed must be greater than 0\");\n      return 0.1;\n    }\n\n    if (speed > 5) {\n      console.log(\"Speed should not be more than 5\");\n      return 5;\n    }\n\n    return speed;\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\nexport interface IGameField {\n  getState(): Cell[][];\n  toggleCellState(x: number, y: number): void;\n  nextGeneration(): boolean;\n  fillState(cellValue?: 0 | 1): void;\n  setSize(width: number, height: number): void;\n}\n\nexport class GameField implements IGameField {\n  private width: number;\n\n  private height: number;\n\n  private state: Cell[][];\n\n  constructor(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.state = GameField.initState(width, height);\n  }\n\n  fillState(cellValue?: 0 | 1) {\n    if (typeof cellValue !== \"undefined\") {\n      this.state = this.state.map((row) => row.map((cell) => cellValue));\n      return;\n    }\n\n    this.state = this.state.map((row) =>\n      row.map((cell) => Math.round(Math.random()) as Cell)\n    );\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  nextGeneration(): boolean {\n    const newState: Cell[][] = [[]];\n\n    for (let y = 0; y < this.height; y++) {\n      newState[y] = [];\n\n      for (let x = 0; x < this.width; x++) {\n        const livingNeighborCount = this.getLivingNeighborCount(x, y);\n\n        if (!this.state[y][x] && livingNeighborCount === 3) {\n          newState[y][x] = 1;\n          continue;\n        }\n\n        if (\n          this.state[y][x] &&\n          (livingNeighborCount < 2 || livingNeighborCount > 3)\n        ) {\n          newState[y][x] = 0;\n          continue;\n        }\n\n        newState[y][x] = this.state[y][x];\n      }\n    }\n\n    if (\n      GameField.arraysEqual(this.state, newState) ||\n      GameField.arrayIsEmpty(newState)\n    ) {\n      this.state = GameField.initState(this.width, this.height);\n      return false;\n    }\n\n    this.state = newState;\n    return true;\n  }\n\n  setSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n\n    const newState: Cell[][] = [[]];\n\n    for (let y = 0; y < height; y++) {\n      newState[y] = [];\n\n      for (let x = 0; x < width; x++) {\n        newState[y][x] = Array.isArray(this.state[y])\n          ? (+!!this.state[y][x] as Cell)\n          : 0;\n      }\n    }\n\n    this.state = newState;\n  }\n\n  toggleCellState(x: number, y: number) {\n    this.state[y][x] = +!this.state[y][x] as Cell;\n  }\n\n  private checkIfOutsideField(x: number, y: number) {\n    return x < 0 || y < 0 || x >= this.width || y >= this.height;\n  }\n\n  private static arraysEqual(arr1: Cell[][], arr2: Cell[][]) {\n    return JSON.stringify(arr1) === JSON.stringify(arr2);\n  }\n\n  private static arrayIsEmpty(arr: Cell[][]) {\n    return !arr.find((innerArr) => innerArr.find((item) => item));\n  }\n\n  private static initState(width: number, height: number) {\n    const newState: Cell[][] = [[]];\n\n    for (let y = 0; y < height; y++) {\n      newState[y] = [];\n\n      for (let x = 0; x < width; x++) {\n        newState[y][x] = 0;\n      }\n    }\n\n    return newState;\n  }\n\n  private getLivingNeighborCount(x: number, y: number) {\n    let count = 0;\n\n    for (let i = -1; i <= 1; i++) {\n      for (let j = -1; j <= 1; j++) {\n        const [x1, y1] = [x + j, y + i];\n\n        if (this.checkIfOutsideField(x1, y1)) {\n          continue;\n        }\n\n        if (x1 === x && y1 === y) {\n          continue;\n        }\n\n        if (this.state[y1][x1]) {\n          count++;\n        }\n      }\n    }\n\n    return count;\n  }\n}\n","import { Cell } from \"./types/Cell\";\n\nexport interface IGameView {\n  updateGameField(field: Cell[][]): void;\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    speed?: number;\n    isRunning?: boolean;\n  }): void;\n  onCellClick(cb: (x: number, y: number) => void): void;\n  onBtnNextClick(cb: () => void): void;\n  onBtnRandomClick(cb: () => void): void;\n  onBtnClearClick(cb: () => void): void;\n  onGameStateChange(cb: (newState: boolean) => void): void;\n  onSpeedChange(cb: (speed: number) => void): void;\n  onFieldSizeChange(cb: (width: number, height: number) => void): void;\n}\n\nexport class GameView implements IGameView {\n  wrapper: HTMLElement;\n\n  constructor(el: HTMLElement) {\n    this.wrapper = el;\n\n    this.init();\n  }\n\n  private init() {\n    const gameTitle = GameView.createGameTitle();\n    const gameField = GameView.createGameField();\n    const gameControls = GameView.createGameControls();\n\n    this.wrapper.classList.add(\"game\");\n    this.wrapper.append(gameTitle, gameField, gameControls);\n  }\n\n  updateGameField(field: Cell[][]) {\n    const width: number = field[0].length;\n    const height: number = field.length;\n\n    const gameField = this.wrapper.querySelector(\n      \".game__field > table\"\n    ) as HTMLElement;\n    const newGameField = gameField;\n    newGameField.innerHTML = \"\";\n\n    let allCellsAreDead = true;\n\n    for (let y = 0; y < height; y++) {\n      const row = document.createElement(\"tr\");\n\n      for (let x = 0; x < width; x++) {\n        const cell = document.createElement(\"td\");\n        cell.classList.add(\"cell\");\n        cell.classList.add(field[y][x] ? \"cell_alive\" : \"cell_dead\");\n\n        cell.dataset.x = `${x}`;\n        cell.dataset.y = `${y}`;\n\n        if (allCellsAreDead && field[y][x]) {\n          allCellsAreDead = false;\n        }\n\n        row.append(cell);\n      }\n\n      newGameField.append(row);\n    }\n\n    gameField.innerHTML = newGameField.innerHTML;\n    this.toggleButtons(allCellsAreDead);\n  }\n\n  private toggleButtons(disabled: boolean) {\n    const buttons = this.wrapper.querySelectorAll(\n      \".buttons__item\"\n    ) as NodeListOf<HTMLButtonElement>;\n\n    Array.from(buttons).forEach((btn) => {\n      if (btn.dataset.hasToggle) {\n        /* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n        btn.disabled = disabled;\n      }\n    });\n  }\n\n  updateGameState(state: {\n    width?: number;\n    height?: number;\n    speed?: number;\n    isRunning?: boolean;\n  }) {\n    if (\n      typeof state.width !== \"undefined\" &&\n      typeof state.height !== \"undefined\"\n    ) {\n      this.updateControlsFieldSize(state.width, state.height);\n    }\n\n    if (typeof state.speed !== \"undefined\") {\n      this.updateControlsSpeed(state.speed);\n    }\n\n    if (typeof state.isRunning !== \"undefined\") {\n      this.updateBtnRun(state.isRunning);\n    }\n  }\n\n  private updateControlsFieldSize(width: number, height: number) {\n    const inputWidth = this.wrapper.querySelector(\n      \"#inputWidth\"\n    ) as HTMLInputElement;\n    const inputHeight = this.wrapper.querySelector(\n      \"#inputHeight\"\n    ) as HTMLInputElement;\n\n    inputWidth.value = `${width}`;\n    inputHeight.value = `${height}`;\n  }\n\n  private updateControlsSpeed(speed: number) {\n    const inputSpeed = this.wrapper.querySelector(\n      \"#inputSpeed\"\n    ) as HTMLInputElement;\n    const outputSpeed = this.wrapper.querySelector(\n      \".speed__output\"\n    ) as HTMLOutputElement;\n\n    inputSpeed.value = speed.toFixed(1);\n    outputSpeed.innerHTML = `${speed.toFixed(1)} s`;\n  }\n\n  private updateBtnRun(isRunning: boolean) {\n    const btnRun = this.wrapper.querySelector(\"#btnRun\") as HTMLButtonElement;\n\n    if (isRunning) {\n      btnRun.classList.remove(\"btn-run_play\");\n      btnRun.classList.add(\"btn-run_stop\");\n\n      btnRun.innerHTML = \"Stop\";\n    } else {\n      btnRun.classList.remove(\"btn-run_stop\");\n      btnRun.classList.add(\"btn-run_play\");\n\n      btnRun.innerHTML = \"Play\";\n    }\n  }\n\n  onCellClick(cb: (x: number, y: number) => void) {\n    const gameField = this.wrapper.querySelector(\n      \".game__field > table\"\n    ) as HTMLElement;\n\n    gameField.addEventListener(\"click\", (e) => {\n      const cell = e.target as HTMLElement;\n\n      if (\n        !cell.classList.contains(\"cell\") ||\n        typeof cell.dataset.x === \"undefined\" ||\n        typeof cell.dataset.y === \"undefined\"\n      ) {\n        return;\n      }\n\n      cb(+cell.dataset.x, +cell.dataset.y);\n    });\n  }\n\n  onGameStateChange(cb: (newState: boolean) => void) {\n    const button = this.wrapper.querySelector(\"#btnRun\") as HTMLButtonElement;\n\n    button.addEventListener(\"click\", () => {\n      cb(button.innerHTML === \"Play\");\n    });\n  }\n\n  onBtnNextClick(cb: () => void) {\n    this.onBtnClick(\"#btnNext\", cb);\n  }\n\n  onBtnRandomClick(cb: () => void) {\n    this.onBtnClick(\"#btnRandom\", cb);\n  }\n\n  onBtnClearClick(cb: () => void) {\n    this.onBtnClick(\"#btnClear\", cb);\n  }\n\n  private onBtnClick(selector: string, cb: () => void) {\n    const button = this.wrapper.querySelector(selector) as HTMLButtonElement;\n\n    button.addEventListener(\"click\", () => {\n      cb();\n    });\n  }\n\n  onSpeedChange(cb: (speed: number) => void) {\n    const inputSpeed = this.wrapper.querySelector(\n      \"#inputSpeed\"\n    ) as HTMLInputElement;\n\n    inputSpeed.addEventListener(\"input\", () => {\n      cb(+inputSpeed.value);\n    });\n  }\n\n  onFieldSizeChange(cb: (width: number, height: number) => void) {\n    const inputWidth = this.wrapper.querySelector(\n      \"#inputWidth\"\n    ) as HTMLInputElement;\n    const inputHeight = this.wrapper.querySelector(\n      \"#inputHeight\"\n    ) as HTMLInputElement;\n\n    inputWidth.addEventListener(\"change\", () => {\n      cb(+inputWidth.value, +inputHeight.value);\n    });\n\n    inputHeight.addEventListener(\"change\", () => {\n      cb(+inputWidth.value, +inputHeight.value);\n    });\n  }\n\n  private static createGameTitle() {\n    const gameTitle = document.createElement(\"h1\");\n    gameTitle.classList.add(\"game__title\");\n    gameTitle.innerHTML = \"OTUS Game of Life\";\n\n    return gameTitle;\n  }\n\n  private static createGameField() {\n    const gameField = document.createElement(\"div\");\n    gameField.classList.add(\"game__field\");\n\n    const table = document.createElement(\"table\");\n\n    gameField.append(table);\n\n    return gameField;\n  }\n\n  private static createGameControls() {\n    const gameControls = document.createElement(\"div\");\n    gameControls.classList.add(\"game__controls\", \"controls\");\n\n    const controlsButtons = GameView.createControlsButtons();\n    const controlsFieldSize = GameView.createControlsFieldSize();\n    const controlsSpeed = GameView.createControlsSpeed();\n\n    gameControls.append(controlsButtons, controlsFieldSize, controlsSpeed);\n\n    return gameControls;\n  }\n\n  private static createControlsButtons() {\n    const buttons = document.createElement(\"div\");\n    buttons.classList.add(\"controls__item\", \"buttons\");\n\n    const buttonsContent = [\n      {\n        id: \"btnRun\",\n        classes: [\"buttons__item\", \"btn-run\", \"btn-run_play\"],\n        text: \"Play\",\n        disabled: true,\n      },\n      {\n        id: \"btnNext\",\n        classes: [\"buttons__item\", \"btn-next\"],\n        text: \"Next\",\n        disabled: true,\n      },\n      {\n        id: \"btnRandom\",\n        classes: [\"buttons__item\", \"btn-random\"],\n        text: \"Random\",\n      },\n      {\n        id: \"btnClear\",\n        classes: [\"buttons__item\", \"btn-clear\"],\n        text: \"Clear\",\n        disabled: true,\n      },\n    ];\n\n    buttonsContent.forEach((b) => {\n      const btn = document.createElement(\"button\");\n      btn.id = b.id;\n      btn.classList.add(...b.classes);\n      btn.innerHTML = b.text;\n\n      if (b.disabled) {\n        btn.disabled = b.disabled;\n        btn.dataset.hasToggle = \"true\";\n      }\n\n      buttons.append(btn);\n    });\n\n    return buttons;\n  }\n\n  private static createControlsSpeed() {\n    const controlsSpeed = document.createElement(\"div\");\n    controlsSpeed.classList.add(\"controls__item\", \"speed\");\n\n    const label = document.createElement(\"label\");\n    label.classList.add(\"speed__label\");\n    label.setAttribute(\"for\", \"inputSpeed\");\n    label.innerHTML = \"Speed: \";\n\n    const inputSpeed = document.createElement(\"input\") as HTMLInputElement;\n    inputSpeed.classList.add(\"speed__input\");\n    inputSpeed.id = \"inputSpeed\";\n    inputSpeed.type = \"range\";\n    inputSpeed.step = \"0.1\";\n    inputSpeed.value = \"0\";\n    inputSpeed.max = \"5\";\n\n    const output = document.createElement(\"output\") as HTMLOutputElement;\n    output.classList.add(\"speed__output\");\n    output.setAttribute(\"for\", \"inputSpeed\");\n\n    controlsSpeed.append(label, inputSpeed, output);\n\n    return controlsSpeed;\n  }\n\n  private static createControlsFieldSize() {\n    const controlsFieldSize = document.createElement(\"div\");\n    controlsFieldSize.classList.add(\"controls__item\", \"field-size\");\n\n    [\"Width\", \"Height\"].forEach((param) => {\n      const fieldSizeParam = document.createElement(\"div\");\n      fieldSizeParam.classList.add(\"field-size__param\");\n\n      const label = document.createElement(\"label\");\n      label.classList.add(\"field-size__label\");\n      label.innerHTML = `${param}: `;\n\n      const input = document.createElement(\"input\");\n      input.type = \"number\";\n      input.id = `input${param}`;\n      input.classList.add(\n        \"field-size__input\",\n        `field-size__input_${param.toLowerCase()}`\n      );\n\n      fieldSizeParam.append(label, input);\n      controlsFieldSize.append(fieldSizeParam);\n    });\n\n    return controlsFieldSize;\n  }\n}\n","import { Game } from \"./Game\";\nimport { GameField } from \"./GameField\";\nimport { GameView } from \"./GameView\";\nimport \"../styles/styles.css\";\n\nconst el = document.getElementById(\"app\") as HTMLElement;\nconst gameView = new GameView(el);\nconst gameField = new GameField(5, 5);\nconst game = new Game(gameField, gameView);\n"],"names":["Game","isRunning","constructor","gameField","gameView","speed","this","toCorrectSpeed","renderInitialState","state","getState","updateGameField","updateGameState","width","length","height","bindCallbacks","onCellClick","toggleCell","bind","onBtnNextClick","next","onBtnRandomClick","fillState","onBtnClearClick","onFieldSizeChange","changeFieldSize","onSpeedChange","changeSpeed","onGameStateChange","toggleIsRunning","setSize","start","cellValue","isNextGeneration","nextGeneration","alert","clearTimeout","generatorId","window","setTimeout","stop","x","y","toggleCellState","console","log","GameField","initState","map","row","cell","Math","round","random","newState","livingNeighborCount","getLivingNeighborCount","arraysEqual","arrayIsEmpty","Array","isArray","checkIfOutsideField","arr1","arr2","JSON","stringify","arr","find","innerArr","item","count","i","j","x1","y1","GameView","el","wrapper","init","gameTitle","createGameTitle","createGameField","gameControls","createGameControls","classList","add","append","field","querySelector","newGameField","innerHTML","allCellsAreDead","document","createElement","dataset","toggleButtons","disabled","buttons","querySelectorAll","from","forEach","btn","hasToggle","updateControlsFieldSize","updateControlsSpeed","updateBtnRun","inputWidth","inputHeight","value","inputSpeed","outputSpeed","toFixed","btnRun","remove","cb","addEventListener","e","target","contains","button","onBtnClick","selector","table","controlsButtons","createControlsButtons","controlsFieldSize","createControlsFieldSize","controlsSpeed","createControlsSpeed","id","classes","text","b","label","setAttribute","type","step","max","output","param","fieldSizeParam","input","toLowerCase","getElementById"],"sourceRoot":""}